import jsPDF from 'jspdf';
import * as XLSX from 'xlsx';

export class ExportService {
  // PDF Export with comprehensive content
  static exportToPDF(data: any, title: string, type: 'permit' | 'incident' | 'audit' | 'hazop' | 'hira' | 'bbs') {
    const doc = new jsPDF();
    let yPosition = 20;
    
    // Header with logo and company info
    doc.setFontSize(20);
    doc.setFont('helvetica', 'bold');
    doc.text(title, 20, yPosition);
    yPosition += 15;
    
    // Company info
    if (data.company) {
      doc.setFontSize(12);
      doc.setFont('helvetica', 'normal');
      doc.text(`Company: ${data.company.name}`, 20, yPosition);
      yPosition += 8;
      doc.text(`Plant: ${data.plantId?.name || data.plant?.name || 'N/A'}`, 20, yPosition);
      yPosition += 8;
      doc.text(`Generated on: ${new Date().toLocaleString()}`, 20, yPosition);
      yPosition += 15;
    }
    
    // Add line separator
    doc.setLineWidth(0.5);
    doc.line(20, yPosition, 190, yPosition);
    yPosition += 10;
    
    switch (type) {
      case 'permit':
        yPosition = this.addPermitToPDF(doc, data, yPosition);
        break;
      case 'incident':
        yPosition = this.addIncidentToPDF(doc, data, yPosition);
        break;
      case 'audit':
        yPosition = this.addAuditToPDF(doc, data, yPosition);
        break;
      case 'hazop':
        yPosition = this.addHAZOPToPDF(doc, data, yPosition);
        break;
      case 'hira':
        yPosition = this.addHIRAToPDF(doc, data, yPosition);
        break;
      case 'bbs':
        yPosition = this.addBBSToPDF(doc, data, yPosition);
        break;
    }
    
    // Footer
    const pageHeight = doc.internal.pageSize.height;
    doc.setFontSize(8);
    doc.setFont('helvetica', 'italic');
    doc.text(`Generated by SafetyPro - ${new Date().toLocaleString()}`, 20, pageHeight - 10);
    doc.text(`Exported by: ${data.exportedBy || 'System'}`, 120, pageHeight - 10);
    
    doc.save(`${title.replace(/\s+/g, '_')}.pdf`);
  }

  private static addPermitToPDF(doc: jsPDF, permit: any, yPosition: number): number {
    doc.setFontSize(16);
    doc.setFont('helvetica', 'bold');
    doc.text('PERMIT TO WORK DETAILS', 20, yPosition);
    yPosition += 15;
    
    // Basic Information
    doc.setFontSize(12);
    doc.setFont('helvetica', 'bold');
    doc.text('Basic Information:', 20, yPosition);
    yPosition += 10;
    
    doc.setFont('helvetica', 'normal');
    const basicInfo = [
      `Permit Number: ${permit.permitNumber}`,
      `Status: ${permit.status?.toUpperCase()}`,
      `Work Description: ${permit.workDescription}`,
      `Location: ${permit.location?.area} - ${permit.location?.specificLocation || ''}`,
      `Start Date: ${new Date(permit.schedule?.startDate).toLocaleString()}`,
      `End Date: ${new Date(permit.schedule?.endDate).toLocaleString()}`,
      `Requested By: ${permit.requestedBy?.name}`,
      `Contractor: ${permit.contractor?.name || 'N/A'}`
    ];
    
    basicInfo.forEach(info => {
      doc.text(info, 25, yPosition);
      yPosition += 8;
    });
    yPosition += 5;
    
    // Permit Types
    if (permit.types && permit.types.length > 0) {
      doc.setFont('helvetica', 'bold');
      doc.text('Permit Types:', 20, yPosition);
      yPosition += 8;
      doc.setFont('helvetica', 'normal');
      permit.types.forEach((type: string) => {
        doc.text(`• ${type.replace('_', ' ').toUpperCase()}`, 25, yPosition);
        yPosition += 6;
      });
      yPosition += 5;
    }
    
    // Workers
    if (permit.workers && permit.workers.length > 0) {
      doc.setFont('helvetica', 'bold');
      doc.text('Workers:', 20, yPosition);
      yPosition += 8;
      doc.setFont('helvetica', 'normal');
      permit.workers.forEach((worker: any, index: number) => {
        doc.text(`${index + 1}. ${worker.name} (ID: ${worker.id})`, 25, yPosition);
        yPosition += 6;
        if (worker.contact) {
          doc.text(`   Contact: ${worker.contact}`, 25, yPosition);
          yPosition += 6;
        }
      });
      yPosition += 5;
    }
    
    // Hazards and Mitigations
    if (permit.hazards && permit.hazards.length > 0) {
      doc.setFont('helvetica', 'bold');
      doc.text('Identified Hazards & Mitigations:', 20, yPosition);
      yPosition += 8;
      doc.setFont('helvetica', 'normal');
      permit.hazards.forEach((hazard: any, index: number) => {
        doc.text(`${index + 1}. Hazard: ${hazard.type}`, 25, yPosition);
        yPosition += 6;
        doc.text(`   Mitigation: ${hazard.mitigation}`, 25, yPosition);
        yPosition += 8;
      });
      yPosition += 5;
    }
    
    // Safety Checklist
    if (permit.safetyChecklist && permit.safetyChecklist.length > 0) {
      doc.setFont('helvetica', 'bold');
      doc.text('Safety Checklist:', 20, yPosition);
      yPosition += 8;
      doc.setFont('helvetica', 'normal');
      permit.safetyChecklist.forEach((item: any) => {
        const status = item.checked ? '✓' : '✗';
        doc.text(`${status} ${item.item}`, 25, yPosition);
        yPosition += 6;
        if (item.remarks) {
          doc.text(`   Remarks: ${item.remarks}`, 25, yPosition);
          yPosition += 6;
        }
      });
    }
    
    return yPosition + 10;
  }

  private static addIncidentToPDF(doc: jsPDF, incident: any, yPosition: number): number {
    doc.setFontSize(16);
    doc.setFont('helvetica', 'bold');
    doc.text('INCIDENT REPORT DETAILS', 20, yPosition);
    yPosition += 15;
    
    // Basic Information
    doc.setFontSize(12);
    doc.setFont('helvetica', 'bold');
    doc.text('Incident Information:', 20, yPosition);
    yPosition += 10;
    
    doc.setFont('helvetica', 'normal');
    const incidentInfo = [
      `Incident Number: ${incident.incidentNumber}`,
      `Type: ${incident.type?.replace('_', ' ').toUpperCase()}`,
      `Severity: ${incident.severity?.toUpperCase()}`,
      `Classification: ${incident.classification?.replace('_', ' ').toUpperCase() || 'N/A'}`,
      `Date/Time: ${new Date(incident.dateTime).toLocaleString()}`,
      `Location: ${incident.location?.area} - ${incident.location?.specificLocation || ''}`,
      `Reported By: ${incident.reportedBy?.name}`,
      `Status: ${incident.status?.toUpperCase()}`
    ];
    
    incidentInfo.forEach(info => {
      doc.text(info, 25, yPosition);
      yPosition += 8;
    });
    yPosition += 10;
    
    // Description
    doc.setFont('helvetica', 'bold');
    doc.text('Description:', 20, yPosition);
    yPosition += 8;
    doc.setFont('helvetica', 'normal');
    const description = doc.splitTextToSize(incident.description, 170);
    description.forEach((line: string) => {
      doc.text(line, 25, yPosition);
      yPosition += 6;
    });
    yPosition += 10;
    
    // Affected Persons
    if (incident.affectedPersons && incident.affectedPersons.length > 0) {
      doc.setFont('helvetica', 'bold');
      doc.text('Affected Persons:', 20, yPosition);
      yPosition += 8;
      doc.setFont('helvetica', 'normal');
      incident.affectedPersons.forEach((person: any, index: number) => {
        doc.text(`${index + 1}. ${person.name} (${person.role || 'N/A'})`, 25, yPosition);
        yPosition += 6;
        if (person.injuryDetails) {
          doc.text(`   Injury: ${person.injuryDetails}`, 25, yPosition);
          yPosition += 6;
        }
      });
      yPosition += 10;
    }
    
    // Investigation
    if (incident.investigation) {
      doc.setFont('helvetica', 'bold');
      doc.text('Investigation Details:', 20, yPosition);
      yPosition += 8;
      doc.setFont('helvetica', 'normal');
      
      if (incident.investigation.findings) {
        doc.text('Findings:', 25, yPosition);
        yPosition += 6;
        const findings = doc.splitTextToSize(incident.investigation.findings, 165);
        findings.forEach((line: string) => {
          doc.text(line, 30, yPosition);
          yPosition += 6;
        });
        yPosition += 5;
      }
      
      if (incident.investigation.rootCause) {
        doc.text('Root Cause Analysis:', 25, yPosition);
        yPosition += 6;
        if (incident.investigation.rootCause.immediate) {
          doc.text(`Immediate: ${incident.investigation.rootCause.immediate}`, 30, yPosition);
          yPosition += 6;
        }
        if (incident.investigation.rootCause.underlying) {
          doc.text(`Underlying: ${incident.investigation.rootCause.underlying}`, 30, yPosition);
          yPosition += 6;
        }
        if (incident.investigation.rootCause.rootCause) {
          doc.text(`Root Cause: ${incident.investigation.rootCause.rootCause}`, 30, yPosition);
          yPosition += 6;
        }
      }
    }
    
    return yPosition + 10;
  }

  private static addAuditToPDF(doc: jsPDF, audit: any, yPosition: number): number {
    doc.setFontSize(16);
    doc.setFont('helvetica', 'bold');
    doc.text('SAFETY AUDIT REPORT', 20, yPosition);
    yPosition += 15;
    
    // Basic Information
    doc.setFontSize(12);
    doc.setFont('helvetica', 'bold');
    doc.text('Audit Information:', 20, yPosition);
    yPosition += 10;
    
    doc.setFont('helvetica', 'normal');
    const auditInfo = [
      `Audit Number: ${audit.auditNumber}`,
      `Title: ${audit.title}`,
      `Type: ${audit.type?.replace('_', ' ').toUpperCase()}`,
      `Standard: ${audit.standard}`,
      `Scope: ${audit.scope}`,
      `Scheduled Date: ${new Date(audit.scheduledDate).toLocaleDateString()}`,
      `Auditor: ${audit.auditor?.name}`,
      `Status: ${audit.status?.toUpperCase()}`
    ];
    
    auditInfo.forEach(info => {
      doc.text(info, 25, yPosition);
      yPosition += 8;
    });
    yPosition += 10;
    
    // Audit Team
    if (audit.auditTeam && audit.auditTeam.length > 0) {
      doc.setFont('helvetica', 'bold');
      doc.text('Audit Team:', 20, yPosition);
      yPosition += 8;
      doc.setFont('helvetica', 'normal');
      audit.auditTeam.forEach((member: any, index: number) => {
        doc.text(`${index + 1}. ${member.member?.name} - ${member.role}`, 25, yPosition);
        yPosition += 6;
      });
      yPosition += 10;
    }
    
    // Compliance Summary
    if (audit.summary) {
      doc.setFont('helvetica', 'bold');
      doc.text('Compliance Summary:', 20, yPosition);
      yPosition += 8;
      doc.setFont('helvetica', 'normal');
      doc.text(`Total Items: ${audit.summary.totalItems}`, 25, yPosition);
      yPosition += 6;
      doc.text(`Compliant: ${audit.summary.compliant}`, 25, yPosition);
      yPosition += 6;
      doc.text(`Non-Compliant: ${audit.summary.nonCompliant}`, 25, yPosition);
      yPosition += 6;
      doc.text(`Compliance Percentage: ${audit.summary.compliancePercentage}%`, 25, yPosition);
      yPosition += 10;
    }
    
    // Findings
    if (audit.findings && audit.findings.length > 0) {
      doc.setFont('helvetica', 'bold');
      doc.text('Audit Findings:', 20, yPosition);
      yPosition += 8;
      
      audit.findings.forEach((finding: any, index: number) => {
        if (yPosition > 250) {
          doc.addPage();
          yPosition = 20;
        }
        
        doc.setFont('helvetica', 'bold');
        doc.text(`Finding ${index + 1}: ${finding.type?.replace('_', ' ').toUpperCase()}`, 25, yPosition);
        yPosition += 8;
        
        doc.setFont('helvetica', 'normal');
        if (finding.description) {
          const description = doc.splitTextToSize(`Description: ${finding.description}`, 165);
          description.forEach((line: string) => {
            doc.text(line, 30, yPosition);
            yPosition += 6;
          });
        }
        
        if (finding.recommendation) {
          const recommendation = doc.splitTextToSize(`Recommendation: ${finding.recommendation}`, 165);
          recommendation.forEach((line: string) => {
            doc.text(line, 30, yPosition);
            yPosition += 6;
          });
        }
        
        if (finding.correctiveAction) {
          doc.text(`Corrective Action: ${finding.correctiveAction.action}`, 30, yPosition);
          yPosition += 6;
          doc.text(`Assigned To: ${finding.correctiveAction.assignedTo?.name || 'TBD'}`, 30, yPosition);
          yPosition += 6;
          doc.text(`Due Date: ${finding.correctiveAction.dueDate ? new Date(finding.correctiveAction.dueDate).toLocaleDateString() : 'TBD'}`, 30, yPosition);
          yPosition += 6;
        }
        yPosition += 5;
      });
    }
    
    return yPosition;
  }

  private static addHAZOPToPDF(doc: jsPDF, hazop: any, yPosition: number): number {
    doc.setFontSize(16);
    doc.setFont('helvetica', 'bold');
    doc.text('HAZOP STUDY REPORT', 20, yPosition);
    yPosition += 15;
    
    // Study Information
    doc.setFontSize(12);
    doc.setFont('helvetica', 'bold');
    doc.text('Study Information:', 20, yPosition);
    yPosition += 10;
    
    doc.setFont('helvetica', 'normal');
    const studyInfo = [
      `Study Number: ${hazop.studyNumber}`,
      `Title: ${hazop.title}`,
      `Methodology: ${hazop.methodology}`,
      `Process: ${hazop.process?.name || 'N/A'}`,
      `Facilitator: ${hazop.facilitator?.name}`,
      `Chairman: ${hazop.chairman?.name || 'N/A'}`,
      `Scribe: ${hazop.scribe?.name || 'N/A'}`,
      `Status: ${hazop.status?.toUpperCase()}`
    ];
    
    studyInfo.forEach(info => {
      doc.text(info, 25, yPosition);
      yPosition += 8;
    });
    yPosition += 10;
    
    // Team Members
    if (hazop.team && hazop.team.length > 0) {
      doc.setFont('helvetica', 'bold');
      doc.text('Study Team:', 20, yPosition);
      yPosition += 8;
      doc.setFont('helvetica', 'normal');
      hazop.team.forEach((member: any, index: number) => {
        doc.text(`${index + 1}. ${member.member?.name} - ${member.role} (${member.expertise || 'N/A'})`, 25, yPosition);
        yPosition += 6;
      });
      yPosition += 10;
    }
    
    // Nodes and Worksheets
    if (hazop.nodes && hazop.nodes.length > 0) {
      doc.setFont('helvetica', 'bold');
      doc.text('Study Nodes & Worksheets:', 20, yPosition);
      yPosition += 8;
      
      hazop.nodes.forEach((node: any, nodeIndex: number) => {
        if (yPosition > 240) {
          doc.addPage();
          yPosition = 20;
        }
        
        doc.setFont('helvetica', 'bold');
        doc.text(`Node ${node.nodeNumber}: ${node.description}`, 25, yPosition);
        yPosition += 8;
        
        doc.setFont('helvetica', 'normal');
        doc.text(`Intention: ${node.intention}`, 30, yPosition);
        yPosition += 6;
        
        if (node.worksheets && node.worksheets.length > 0) {
          node.worksheets.forEach((worksheet: any, wsIndex: number) => {
            doc.text(`Worksheet ${wsIndex + 1}:`, 30, yPosition);
            yPosition += 6;
            doc.text(`  Parameter: ${worksheet.parameter} | Guide Word: ${worksheet.guideWord}`, 35, yPosition);
            yPosition += 6;
            doc.text(`  Deviation: ${worksheet.deviation}`, 35, yPosition);
            yPosition += 6;
            doc.text(`  Risk Score: ${worksheet.riskScore} (${worksheet.risk?.replace('_', ' ').toUpperCase()})`, 35, yPosition);
            yPosition += 8;
          });
        }
        yPosition += 5;
      });
    }
    
    return yPosition;
  }

  private static addHIRAToPDF(doc: jsPDF, hira: any, yPosition: number): number {
    doc.setFontSize(16);
    doc.setFont('helvetica', 'bold');
    doc.text('HIRA ASSESSMENT REPORT', 20, yPosition);
    yPosition += 15;
    
    // Assessment Information
    doc.setFontSize(12);
    doc.setFont('helvetica', 'bold');
    doc.text('Assessment Information:', 20, yPosition);
    yPosition += 10;
    
    doc.setFont('helvetica', 'normal');
    const assessmentInfo = [
      `Assessment Number: ${hira.assessmentNumber}`,
      `Title: ${hira.title}`,
      `Area: ${hira.area}`,
      `Process: ${hira.process}`,
      `Assessment Date: ${new Date(hira.assessmentDate).toLocaleDateString()}`,
      `Assessor: ${hira.assessor?.name}`,
      `Status: ${hira.status?.toUpperCase()}`
    ];
    
    assessmentInfo.forEach(info => {
      doc.text(info, 25, yPosition);
      yPosition += 8;
    });
    yPosition += 10;
    
    // Activities and Hazards
    if (hira.activities && hira.activities.length > 0) {
      doc.setFont('helvetica', 'bold');
      doc.text('Risk Assessment:', 20, yPosition);
      yPosition += 8;
      
      hira.activities.forEach((activity: any, actIndex: number) => {
        if (yPosition > 240) {
          doc.addPage();
          yPosition = 20;
        }
        
        doc.setFont('helvetica', 'bold');
        doc.text(`Activity ${actIndex + 1}: ${activity.activity}`, 25, yPosition);
        yPosition += 8;
        
        if (activity.hazards && activity.hazards.length > 0) {
          activity.hazards.forEach((hazard: any, hazIndex: number) => {
            doc.setFont('helvetica', 'normal');
            doc.text(`Hazard ${hazIndex + 1}: ${hazard.hazard}`, 30, yPosition);
            yPosition += 6;
            doc.text(`  Category: ${hazard.category}`, 35, yPosition);
            yPosition += 6;
            doc.text(`  Risk Score: ${hazard.riskScore} (P:${hazard.probability} S:${hazard.severity} E:${hazard.exposure})`, 35, yPosition);
            yPosition += 6;
            doc.text(`  Risk Level: ${hazard.riskLevel?.replace('_', ' ').toUpperCase()}`, 35, yPosition);
            yPosition += 6;
            doc.text(`  Acceptability: ${hazard.acceptability?.toUpperCase()}`, 35, yPosition);
            yPosition += 8;
          });
        }
        yPosition += 5;
      });
    }
    
    return yPosition;
  }

  private static addBBSToPDF(doc: jsPDF, bbs: any, yPosition: number): number {
    doc.setFontSize(16);
    doc.setFont('helvetica', 'bold');
    doc.text('BBS OBSERVATION REPORT', 20, yPosition);
    yPosition += 15;
    
    // Observation Information
    doc.setFontSize(12);
    doc.setFont('helvetica', 'bold');
    doc.text('Observation Information:', 20, yPosition);
    yPosition += 10;
    
    doc.setFont('helvetica', 'normal');
    const observationInfo = [
      `Report Number: ${bbs.reportNumber}`,
      `Observation Type: ${bbs.observationType?.replace('_', ' ').toUpperCase()}`,
      `Category: ${bbs.category}`,
      `Severity: ${bbs.severity?.toUpperCase()}`,
      `Observation Date: ${new Date(bbs.observationDate).toLocaleDateString()}`,
      `Observer: ${bbs.observer?.name}`,
      `Location: ${bbs.location?.area}`,
      `Status: ${bbs.status?.toUpperCase()}`
    ];
    
    observationInfo.forEach(info => {
      doc.text(info, 25, yPosition);
      yPosition += 8;
    });
    yPosition += 10;
    
    // Description
    doc.setFont('helvetica', 'bold');
    doc.text('Description:', 20, yPosition);
    yPosition += 8;
    doc.setFont('helvetica', 'normal');
    const description = doc.splitTextToSize(bbs.description, 170);
    description.forEach((line: string) => {
      doc.text(line, 25, yPosition);
      yPosition += 6;
    });
    yPosition += 10;
    
    // Observed Persons
    if (bbs.observedPersons && bbs.observedPersons.length > 0) {
      doc.setFont('helvetica', 'bold');
      doc.text('Observed Persons:', 20, yPosition);
      yPosition += 8;
      doc.setFont('helvetica', 'normal');
      bbs.observedPersons.forEach((person: any, index: number) => {
        doc.text(`${index + 1}. ${person.name}`, 25, yPosition);
        yPosition += 6;
        if (person.designation) {
          doc.text(`   Designation: ${person.designation}`, 25, yPosition);
          yPosition += 6;
        }
        if (person.department) {
          doc.text(`   Department: ${person.department}`, 25, yPosition);
          yPosition += 6;
        }
      });
      yPosition += 10;
    }
    
    // Corrective Actions
    if (bbs.correctiveActions && bbs.correctiveActions.length > 0) {
      doc.setFont('helvetica', 'bold');
      doc.text('Corrective Actions:', 20, yPosition);
      yPosition += 8;
      doc.setFont('helvetica', 'normal');
      bbs.correctiveActions.forEach((action: any, index: number) => {
        doc.text(`${index + 1}. ${action.action}`, 25, yPosition);
        yPosition += 6;
        doc.text(`   Assigned To: ${action.assignedTo?.name || 'TBD'}`, 25, yPosition);
        yPosition += 6;
        doc.text(`   Due Date: ${action.dueDate ? new Date(action.dueDate).toLocaleDateString() : 'TBD'}`, 25, yPosition);
        yPosition += 6;
        doc.text(`   Status: ${action.status?.replace('_', ' ').toUpperCase()}`, 25, yPosition);
        yPosition += 8;
      });
    }
    
    return yPosition;
  }

  // Excel Export with comprehensive data
  static exportToExcel(data: any[], title: string, type: string) {
    const workbook = XLSX.utils.book_new();
    
    // Main data sheet
    const worksheet = XLSX.utils.json_to_sheet(data.map(item => {
      // Flatten nested objects for Excel
      const flattened: any = {};
      
      Object.keys(item).forEach(key => {
        if (typeof item[key] === 'object' && item[key] !== null && !Array.isArray(item[key])) {
          Object.keys(item[key]).forEach(subKey => {
            flattened[`${key}_${subKey}`] = item[key][subKey];
          });
        } else if (Array.isArray(item[key])) {
          flattened[key] = item[key].join(', ');
        } else {
          flattened[key] = item[key];
        }
      });
      
      return flattened;
    }));
    
    XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');
    
    // Summary sheet
    const summaryData = [
      { Field: 'Total Records', Value: data.length },
      { Field: 'Export Date', Value: new Date().toLocaleDateString() },
      { Field: 'Export Time', Value: new Date().toLocaleTimeString() },
      { Field: 'Type', Value: type.toUpperCase() },
      { Field: 'Generated By', Value: 'SafetyPro System' }
    ];
    
    const summarySheet = XLSX.utils.json_to_sheet(summaryData);
    XLSX.utils.book_append_sheet(workbook, summarySheet, 'Summary');
    
    // Auto-size columns
    const colWidths = Object.keys(data[0] || {}).map(key => ({
      wch: Math.max(key.length, 15)
    }));
    worksheet['!cols'] = colWidths;
    
    XLSX.writeFile(workbook, `${title.replace(/\s+/g, '_')}.xlsx`);
  }

  // Word Export with proper formatting
  static exportToWord(data: any, title: string) {
    const htmlContent = `
      <!DOCTYPE html>
      <html>
        <head>
          <title>${title}</title>
          <meta charset="UTF-8">
          <style>
            body { 
              font-family: 'Calibri', Arial, sans-serif; 
              margin: 40px; 
              line-height: 1.6;
              color: #333;
            }
            .header { 
              text-align: center; 
              border-bottom: 3px solid #2563eb; 
              padding-bottom: 20px; 
              margin-bottom: 30px; 
            }
            .header h1 { 
              color: #2563eb; 
              margin: 0; 
              font-size: 24px;
              font-weight: bold;
            }
            .header .subtitle { 
              color: #6b7280; 
              margin: 5px 0 0 0; 
              font-size: 14px;
            }
            .section { 
              margin: 25px 0; 
              page-break-inside: avoid;
            }
            .section-title { 
              color: #1f2937; 
              font-size: 16px; 
              font-weight: bold; 
              margin-bottom: 15px;
              border-bottom: 1px solid #e5e7eb;
              padding-bottom: 5px;
            }
            .info-grid { 
              display: grid; 
              grid-template-columns: 1fr 1fr; 
              gap: 15px; 
              margin: 15px 0; 
            }
            .info-item { 
              margin: 8px 0; 
            }
            .info-label { 
              font-weight: bold; 
              color: #374151; 
              display: inline-block;
              min-width: 120px;
            }
            .info-value { 
              color: #6b7280; 
            }
            table { 
              width: 100%; 
              border-collapse: collapse; 
              margin: 20px 0; 
              font-size: 12px;
            }
            th, td { 
              border: 1px solid #d1d5db; 
              padding: 12px 8px; 
              text-align: left; 
              vertical-align: top;
            }
            th { 
              background-color: #f3f4f6; 
              font-weight: bold;
              color: #374151;
            }
            .status-badge {
              display: inline-block;
              padding: 4px 8px;
              border-radius: 4px;
              font-size: 11px;
              font-weight: bold;
              text-transform: uppercase;
            }
            .status-active { background-color: #dcfce7; color: #166534; }
            .status-pending { background-color: #fef3c7; color: #92400e; }
            .status-closed { background-color: #f3f4f6; color: #374151; }
            .risk-very-high { background-color: #fecaca; color: #991b1b; }
            .risk-high { background-color: #fed7aa; color: #9a3412; }
            .risk-medium { background-color: #fef3c7; color: #92400e; }
            .risk-low { background-color: #dcfce7; color: #166534; }
            .footer { 
              margin-top: 40px; 
              padding-top: 20px;
              border-top: 1px solid #e5e7eb;
              font-size: 12px; 
              color: #6b7280; 
              text-align: center;
            }
            .page-break { page-break-before: always; }
          </style>
        </head>
        <body>
          <div class="header">
            <h1>${title}</h1>
            <p class="subtitle">Generated on ${new Date().toLocaleString()}</p>
            ${data.company ? `<p class="subtitle">${data.company.name}</p>` : ''}
          </div>
          
          <div class="content">
            ${this.generateWordContent(data)}
          </div>
          
          <div class="footer">
            <p><strong>SafetyPro Safety Management System</strong></p>
            <p>This document was automatically generated and contains confidential information.</p>
            <p>Document ID: ${Date.now()} | Export Date: ${new Date().toISOString()}</p>
          </div>
        </body>
      </html>
    `;
    
    const blob = new Blob([htmlContent], { type: 'application/msword' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `${title.replace(/\s+/g, '_')}.doc`;
    link.click();
    URL.revokeObjectURL(url);
  }

  private static generateWordContent(data: any): string {
    if (Array.isArray(data)) {
      if (data.length === 0) return '<p>No data available</p>';
      
      const headers = Object.keys(data[0]);
      let html = '<div class="section"><h2 class="section-title">Data Summary</h2>';
      html += '<table><thead><tr>';
      
      headers.forEach(header => {
        html += `<th>${header.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}</th>`;
      });
      
      html += '</tr></thead><tbody>';
      
      data.forEach(row => {
        html += '<tr>';
        headers.forEach(header => {
          const value = row[header];
          let cellContent = '';
          
          if (typeof value === 'object' && value !== null) {
            cellContent = JSON.stringify(value);
          } else if (header.includes('status') || header.includes('Status')) {
            cellContent = `<span class="status-badge status-${value?.toLowerCase()}">${value || ''}</span>`;
          } else if (header.includes('risk') || header.includes('Risk')) {
            cellContent = `<span class="status-badge risk-${value?.toLowerCase()?.replace('_', '-')}">${value || ''}</span>`;
          } else {
            cellContent = value || '';
          }
          
          html += `<td>${cellContent}</td>`;
        });
        html += '</tr>';
      });
      
      html += '</tbody></table></div>';
      return html;
    } else {
      // Single object - create detailed report
      let html = '';
      
      // Basic Information Section
      html += '<div class="section">';
      html += '<h2 class="section-title">Basic Information</h2>';
      html += '<div class="info-grid">';
      
      Object.entries(data).forEach(([key, value]) => {
        if (typeof value !== 'object' || value === null) {
          html += `<div class="info-item">`;
          html += `<span class="info-label">${key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}:</span> `;
          html += `<span class="info-value">${value || 'N/A'}</span>`;
          html += `</div>`;
        }
      });
      
      html += '</div></div>';
      
      // Complex objects as separate sections
      Object.entries(data).forEach(([key, value]) => {
        if (typeof value === 'object' && value !== null && !Array.isArray(value)) {
          html += `<div class="section">`;
          html += `<h2 class="section-title">${key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}</h2>`;
          html += '<div class="info-grid">';
          
          Object.entries(value).forEach(([subKey, subValue]) => {
            html += `<div class="info-item">`;
            html += `<span class="info-label">${subKey.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}:</span> `;
            html += `<span class="info-value">${typeof subValue === 'object' ? JSON.stringify(subValue) : subValue || 'N/A'}</span>`;
            html += `</div>`;
          });
          
          html += '</div></div>';
        } else if (Array.isArray(value) && value.length > 0) {
          html += `<div class="section">`;
          html += `<h2 class="section-title">${key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())} (${value.length})</h2>`;
          
          if (typeof value[0] === 'object') {
            // Create table for array of objects
            const headers = Object.keys(value[0]);
            html += '<table><thead><tr>';
            headers.forEach(header => {
              html += `<th>${header.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}</th>`;
            });
            html += '</tr></thead><tbody>';
            
            value.forEach(item => {
              html += '<tr>';
              headers.forEach(header => {
                const cellValue = item[header];
                html += `<td>${typeof cellValue === 'object' ? JSON.stringify(cellValue) : cellValue || ''}</td>`;
              });
              html += '</tr>';
            });
            
            html += '</tbody></table>';
          } else {
            // Simple list
            html += '<ul>';
            value.forEach(item => {
              html += `<li>${item}</li>`;
            });
            html += '</ul>';
          }
          
          html += '</div>';
        }
      });
      
      return html;
    }
  }

  // Bulk export for multiple items with enhanced formatting
  static exportBulkToExcel(items: any[], type: string, companyName: string) {
    const workbook = XLSX.utils.book_new();
    
    // Summary sheet with enhanced metrics
    const summaryData = [
      { Field: 'Company', Value: companyName },
      { Field: 'Report Type', Value: type.toUpperCase() },
      { Field: 'Total Records', Value: items.length },
      { Field: 'Export Date', Value: new Date().toLocaleDateString() },
      { Field: 'Export Time', Value: new Date().toLocaleTimeString() },
      { Field: 'Generated By', Value: 'SafetyPro System' },
      { Field: '', Value: '' }, // Empty row
      { Field: 'Statistics', Value: '' },
      { Field: 'Active Records', Value: items.filter(item => item.status === 'active' || item.status === 'approved').length },
      { Field: 'Closed Records', Value: items.filter(item => item.status === 'closed').length },
      { Field: 'Pending Records', Value: items.filter(item => item.status === 'pending' || item.status === 'submitted').length }
    ];
    
    const summarySheet = XLSX.utils.json_to_sheet(summaryData);
    XLSX.utils.book_append_sheet(workbook, summarySheet, 'Summary');
    
    // Data sheet with flattened structure
    if (items.length > 0) {
      const flattenedData = items.map(item => {
        const flattened: any = {};
        
        Object.keys(item).forEach(key => {
          if (typeof item[key] === 'object' && item[key] !== null && !Array.isArray(item[key])) {
            Object.keys(item[key]).forEach(subKey => {
              flattened[`${key}_${subKey}`] = item[key][subKey];
            });
          } else if (Array.isArray(item[key])) {
            flattened[key] = item[key].join('; ');
          } else {
            flattened[key] = item[key];
          }
        });
        
        return flattened;
      });
      
      const dataSheet = XLSX.utils.json_to_sheet(flattenedData);
      
      // Auto-size columns
      const colWidths = Object.keys(flattenedData[0]).map(key => ({
        wch: Math.min(Math.max(key.length, 10), 50)
      }));
      dataSheet['!cols'] = colWidths;
      
      XLSX.utils.book_append_sheet(workbook, dataSheet, 'Data');
    }
    
    // Charts data sheet (for pivot tables)
    if (items.length > 0) {
      const chartData = items.map(item => ({
        Status: item.status,
        Type: item.type || item.observationType || item.methodology || 'N/A',
        Severity: item.severity || 'N/A',
        Month: new Date(item.createdAt || item.dateTime || item.observationDate || Date.now()).toLocaleDateString('en-US', { month: 'short', year: 'numeric' }),
        Plant: item.plantId?.name || 'N/A',
        CreatedBy: item.requestedBy?.name || item.reportedBy?.name || item.observer?.name || item.assessor?.name || item.auditor?.name || 'N/A'
      }));
      
      const chartSheet = XLSX.utils.json_to_sheet(chartData);
      XLSX.utils.book_append_sheet(workbook, chartSheet, 'Charts Data');
    }
    
    XLSX.writeFile(workbook, `${type}_bulk_export_${new Date().toISOString().split('T')[0]}.xlsx`);
  }
}